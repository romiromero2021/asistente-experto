# -*- coding: utf-8 -*-
"""Untitled43.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kwZ-mgrruS6qi2X-DnoELkuiUAmMG4JV
"""

import streamlit as st
import io
import os
import openai
from openai import OpenAI
import PyPDF2
from docx import Document
from docx.shared import Inches, Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
import datetime
import base64

class AsistenteEnergetico:
    def __init__(self, api_key):
        self.client = OpenAI(api_key=api_key)
        self.documentos = {
            '1': {
                'nombre': 'Informe de Electrificación Rural Guatemala',
                'archivo': 'INFORME_ELECTRIFICACION_RURAL_GT.pdf'
            },
            '2': {
                'nombre': 'Cocción de Alimentos Guatemala y Honduras',
                'archivo': 'COCCION_ALIMENTOS_GT_HN.pdf'
            },
            '3': {
                'nombre': 'Acceso a Energía Moderna Honduras',
                'archivo': 'ACCESO_ENERGIA_MODERNA_HN.pdf'
            },
            '4': {
                'nombre': 'Informe UPE Guatemala',
                'archivo': 'INFORME_UPE_GT.pdf'
            }
        }

        self.contexto_sistema = """Eres un experto en temas energéticos, específicamente en:
        - Electrificación rural
        - Cocción de alimentos y uso de energía
        - Acceso a energía moderna
        - Políticas energéticas

        Tu tarea es analizar documentos sobre estos temas y responder preguntas de manera detallada y precisa,
        citando información específica de los documentos cuando sea relevante. Para resúmenes, debes incluir:
        - Objetivo principal del documento
        - Metodología utilizada
        - Principales hallazgos
        - Conclusiones clave
        - Recomendaciones principales"""

    def generar_resumen(self, texto_documento, nombre_documento):
        """Genera un resumen estructurado del documento"""
        try:
            prompt = f"""
            Genera un resumen detallado y estructurado del siguiente documento sobre energía: {nombre_documento}

            El resumen debe incluir:
            1. Objetivo principal
            2. Metodología
            3. Hallazgos principales
            4. Conclusiones clave
            5. Recomendaciones

            Documento:
            {texto_documento[:4000]}

            Por favor, estructura el resumen de manera clara y concisa, utilizando viñetas cuando sea apropiado.
            """

            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": self.contexto_sistema},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=2000
            )

            return response.choices[0].message.content
        except Exception as e:
            st.error(f"Error al generar resumen: {str(e)}")
            return None

    def generar_respuesta(self, pregunta, texto_documento, nombre_documento):
        """Genera una respuesta usando GPT-4"""
        try:
            # Si es una solicitud de resumen, usar la función específica
            if "resumen" in pregunta.lower():
                return self.generar_resumen(texto_documento, nombre_documento)

            prompt = f"""
            Analiza el siguiente documento sobre energía: {nombre_documento}

            Contenido del documento:
            {texto_documento[:4000]}

            Pregunta: {pregunta}

            Proporciona una respuesta detallada basada en el contenido del documento.
            Incluye citas específicas cuando sea relevante y organiza la respuesta de manera clara y estructurada.
            """

            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": self.contexto_sistema},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=2000
            )

            return response.choices[0].message.content
        except Exception as e:
            st.error(f"Error al generar respuesta: {str(e)}")
            return None

    def crear_documento_respuesta(self, pregunta, respuesta, nombre_documento):
        """Crea un documento Word con la respuesta"""
        doc = Document()

        # Estilos
        styles = doc.styles
        style = styles['Normal']
        font = style.font
        font.name = 'Calibri'
        font.size = Pt(11)

        # Título
        titulo = doc.add_heading('Análisis de Documento Energético', 0)
        titulo.alignment = WD_ALIGN_PARAGRAPH.CENTER

        # Información del documento
        doc.add_heading('Información General', 1)
        p = doc.add_paragraph()
        p.add_run('Documento analizado: ').bold = True
        p.add_run(nombre_documento)
        p = doc.add_paragraph()
        p.add_run('Fecha de consulta: ').bold = True
        p.add_run(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

        # Pregunta
        doc.add_heading('Pregunta Realizada', 1)
        doc.add_paragraph(pregunta)

        # Respuesta
        doc.add_heading('Respuesta', 1)
        # Procesar la respuesta por secciones
        secciones = respuesta.split('\n\n')
        for seccion in secciones:
            if seccion.strip():
                # Detectar si es un título
                if seccion.strip().endswith(':') or seccion.strip().isupper():
                    doc.add_heading(seccion.strip(), 2)
                else:
                    # Detectar si es una lista
                    if seccion.strip().startswith(('•', '-', '*')):
                        items = seccion.split('\n')
                        for item in items:
                            if item.strip():
                                doc.add_paragraph(item.strip(), style='List Bullet')
                    else:
                        doc.add_paragraph(seccion.strip())

        # Pie de página
        doc.add_paragraph('\n')
        footer = doc.sections[0].footer
        footer_para = footer.paragraphs[0]
        footer_para.text = f"Generado por Asistente Energético GPT - {datetime.datetime.now().strftime('%Y-%m-%d')}"
        footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER

        # Guardar documento en memoria
        docx_stream = io.BytesIO()
        doc.save(docx_stream)
        docx_stream.seek(0)
        return docx_stream

def get_binary_file_downloader_html(bin_file, file_label='File'):
    """Genera un link de descarga para el archivo binario"""
    bin_str = base64.b64encode(bin_file.read()).decode()
    href = f'<a href="data:application/octet-stream;base64,{bin_str}" download="{file_label}">Descargar {file_label}</a>'
    return href

def main():
    st.set_page_config(
        page_title="Asistente Energético GPT",
        page_icon="⚡",
        layout="wide"
    )

    st.title("Asistente Energético GPT")
    st.markdown("---")

    # Sidebar para la configuración
    st.sidebar.title("Configuración")

    # API Key input en el sidebar
    api_key = st.sidebar.text_input("Ingrese su API key de OpenAI", type="password")

    if not api_key:
        st.warning("Por favor, ingrese su API key de OpenAI para continuar.")
        return

    # Inicializar el asistente
    asistente = AsistenteEnergetico(api_key)

    # Área principal
    col1, col2 = st.columns([1, 2])

    with col1:
        st.subheader("Selección de Documento")
        # Crear lista de documentos para el selectbox
        opciones_documentos = {doc['nombre']: key for key, doc in asistente.documentos.items()}
        documento_seleccionado = st.selectbox(
            "Escoja un documento para analizar:",
            options=list(opciones_documentos.keys())
        )

        # Subir archivo
        st.subheader("Cargar Documento")
        archivo_subido = st.file_uploader("Suba el archivo PDF correspondiente", type=['pdf'])

    with col2:
        if archivo_subido is not None:
            st.subheader("Realizar Consulta")

            # Extraer texto del PDF
            pdf_reader = PyPDF2.PdfReader(archivo_subido)
            texto_documento = ""
            for pagina in pdf_reader.pages:
                texto_documento += pagina.extract_text() + "\n"

            # Área de pregunta
            tipo_consulta = st.radio(
                "Tipo de consulta:",
                ["Resumen del documento", "Pregunta específica"]
            )

            if tipo_consulta == "Pregunta específica":
                pregunta = st.text_area("Escriba su pregunta:")
            else:
                pregunta = "resumen"

            if st.button("Generar respuesta"):
                with st.spinner("Generando respuesta..."):
                    # Obtener respuesta
                    respuesta = asistente.generar_respuesta(
                        pregunta,
                        texto_documento,
                        documento_seleccionado
                    )

                    if respuesta:
                        st.markdown("### Respuesta:")
                        st.markdown(respuesta)

                        # Generar documento Word
                        docx_stream = asistente.crear_documento_respuesta(
                            pregunta,
                            respuesta,
                            documento_seleccionado
                        )

                        # Botón de descarga
                        st.download_button(
                            label="Descargar respuesta como documento Word",
                            data=docx_stream.getvalue(),
                            file_name=f'Respuesta_{datetime.datetime.now().strftime("%Y%m%d_%H%M%S")}.docx',
                            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                        )

if __name__ == "__main__":
    main()